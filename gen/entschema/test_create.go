// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zaihui/ent-factory/gen/entschema/test"
	"github.com/zaihui/ent-factory/spec/schema"
)

// TestCreate is the builder for creating a Test entity.
type TestCreate struct {
	config
	mutation *TestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (tc *TestCreate) SetUID(s string) *TestCreate {
	tc.mutation.SetUID(s)
	return tc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (tc *TestCreate) SetNillableUID(s *string) *TestCreate {
	if s != nil {
		tc.SetUID(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TestCreate) SetCreatedAt(t time.Time) *TestCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableCreatedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TestCreate) SetUpdatedAt(t time.Time) *TestCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableUpdatedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (tc *TestCreate) SetDeactivatedAt(t time.Time) *TestCreate {
	tc.mutation.SetDeactivatedAt(t)
	return tc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableDeactivatedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetDeactivatedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TestCreate) SetName(s string) *TestCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetEnableTakeaway sets the "enable_takeaway" field.
func (tc *TestCreate) SetEnableTakeaway(b bool) *TestCreate {
	tc.mutation.SetEnableTakeaway(b)
	return tc
}

// SetNillableEnableTakeaway sets the "enable_takeaway" field if the given value is not nil.
func (tc *TestCreate) SetNillableEnableTakeaway(b *bool) *TestCreate {
	if b != nil {
		tc.SetEnableTakeaway(*b)
	}
	return tc
}

// SetPhone sets the "phone" field.
func (tc *TestCreate) SetPhone(s string) *TestCreate {
	tc.mutation.SetPhone(s)
	return tc
}

// SetAnnouncement sets the "announcement" field.
func (tc *TestCreate) SetAnnouncement(s string) *TestCreate {
	tc.mutation.SetAnnouncement(s)
	return tc
}

// SetEnableAutoAccept sets the "enable_auto_accept" field.
func (tc *TestCreate) SetEnableAutoAccept(b bool) *TestCreate {
	tc.mutation.SetEnableAutoAccept(b)
	return tc
}

// SetNillableEnableAutoAccept sets the "enable_auto_accept" field if the given value is not nil.
func (tc *TestCreate) SetNillableEnableAutoAccept(b *bool) *TestCreate {
	if b != nil {
		tc.SetEnableAutoAccept(*b)
	}
	return tc
}

// SetDeliveryConfigs sets the "delivery_configs" field.
func (tc *TestCreate) SetDeliveryConfigs(sc schema.DeliveryConfig) *TestCreate {
	tc.mutation.SetDeliveryConfigs(sc)
	return tc
}

// SetPayConfigs sets the "pay_configs" field.
func (tc *TestCreate) SetPayConfigs(sc schema.PayConfig) *TestCreate {
	tc.mutation.SetPayConfigs(sc)
	return tc
}

// SetPrintTimes sets the "print_times" field.
func (tc *TestCreate) SetPrintTimes(i int) *TestCreate {
	tc.mutation.SetPrintTimes(i)
	return tc
}

// SetNillablePrintTimes sets the "print_times" field if the given value is not nil.
func (tc *TestCreate) SetNillablePrintTimes(i *int) *TestCreate {
	if i != nil {
		tc.SetPrintTimes(*i)
	}
	return tc
}

// SetRingConfigs sets the "ring_configs" field.
func (tc *TestCreate) SetRingConfigs(sc schema.RingConfig) *TestCreate {
	tc.mutation.SetRingConfigs(sc)
	return tc
}

// SetBusinessGroupID sets the "business_group_id" field.
func (tc *TestCreate) SetBusinessGroupID(i int) *TestCreate {
	tc.mutation.SetBusinessGroupID(i)
	return tc
}

// SetBusinessGroupUID sets the "business_group_uid" field.
func (tc *TestCreate) SetBusinessGroupUID(s string) *TestCreate {
	tc.mutation.SetBusinessGroupUID(s)
	return tc
}

// SetDishCategories sets the "dish_categories" field.
func (tc *TestCreate) SetDishCategories(s []string) *TestCreate {
	tc.mutation.SetDishCategories(s)
	return tc
}

// SetEndOfTakeaway sets the "end_of_takeaway" field.
func (tc *TestCreate) SetEndOfTakeaway(t time.Time) *TestCreate {
	tc.mutation.SetEndOfTakeaway(t)
	return tc
}

// SetNillableEndOfTakeaway sets the "end_of_takeaway" field if the given value is not nil.
func (tc *TestCreate) SetNillableEndOfTakeaway(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetEndOfTakeaway(*t)
	}
	return tc
}

// SetMode sets the "mode" field.
func (tc *TestCreate) SetMode(i int) *TestCreate {
	tc.mutation.SetMode(i)
	return tc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (tc *TestCreate) SetNillableMode(i *int) *TestCreate {
	if i != nil {
		tc.SetMode(*i)
	}
	return tc
}

// SetSelfPickupConfigs sets the "self_pickup_configs" field.
func (tc *TestCreate) SetSelfPickupConfigs(spc schema.SelfPickupConfig) *TestCreate {
	tc.mutation.SetSelfPickupConfigs(spc)
	return tc
}

// SetServerID sets the "server_id" field.
func (tc *TestCreate) SetServerID(i int) *TestCreate {
	tc.mutation.SetServerID(i)
	return tc
}

// SetImage sets the "image" field.
func (tc *TestCreate) SetImage(s string) *TestCreate {
	tc.mutation.SetImage(s)
	return tc
}

// SetAddress sets the "address" field.
func (tc *TestCreate) SetAddress(s string) *TestCreate {
	tc.mutation.SetAddress(s)
	return tc
}

// SetLatitude sets the "latitude" field.
func (tc *TestCreate) SetLatitude(s string) *TestCreate {
	tc.mutation.SetLatitude(s)
	return tc
}

// SetLongitude sets the "longitude" field.
func (tc *TestCreate) SetLongitude(s string) *TestCreate {
	tc.mutation.SetLongitude(s)
	return tc
}

// SetBanners sets the "banners" field.
func (tc *TestCreate) SetBanners(s schema.Banners) *TestCreate {
	tc.mutation.SetBanners(s)
	return tc
}

// SetSort sets the "sort" field.
func (tc *TestCreate) SetSort(i int) *TestCreate {
	tc.mutation.SetSort(i)
	return tc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (tc *TestCreate) SetNillableSort(i *int) *TestCreate {
	if i != nil {
		tc.SetSort(*i)
	}
	return tc
}

// SetPayMode sets the "pay_mode" field.
func (tc *TestCreate) SetPayMode(s string) *TestCreate {
	tc.mutation.SetPayMode(s)
	return tc
}

// SetNillablePayMode sets the "pay_mode" field if the given value is not nil.
func (tc *TestCreate) SetNillablePayMode(s *string) *TestCreate {
	if s != nil {
		tc.SetPayMode(*s)
	}
	return tc
}

// SetDineInConfigs sets the "dine_in_configs" field.
func (tc *TestCreate) SetDineInConfigs(sic schema.DineInConfigs) *TestCreate {
	tc.mutation.SetDineInConfigs(sic)
	return tc
}

// SetNillableDineInConfigs sets the "dine_in_configs" field if the given value is not nil.
func (tc *TestCreate) SetNillableDineInConfigs(sic *schema.DineInConfigs) *TestCreate {
	if sic != nil {
		tc.SetDineInConfigs(*sic)
	}
	return tc
}

// SetDealsConfig sets the "deals_config" field.
func (tc *TestCreate) SetDealsConfig(sc schema.DealsConfig) *TestCreate {
	tc.mutation.SetDealsConfig(sc)
	return tc
}

// SetNillableDealsConfig sets the "deals_config" field if the given value is not nil.
func (tc *TestCreate) SetNillableDealsConfig(sc *schema.DealsConfig) *TestCreate {
	if sc != nil {
		tc.SetDealsConfig(*sc)
	}
	return tc
}

// SetPrintConfig sets the "print_config" field.
func (tc *TestCreate) SetPrintConfig(sc schema.PrintConfig) *TestCreate {
	tc.mutation.SetPrintConfig(sc)
	return tc
}

// SetNillablePrintConfig sets the "print_config" field if the given value is not nil.
func (tc *TestCreate) SetNillablePrintConfig(sc *schema.PrintConfig) *TestCreate {
	if sc != nil {
		tc.SetPrintConfig(*sc)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TestCreate) SetID(i int) *TestCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TestMutation object of the builder.
func (tc *TestCreate) Mutation() *TestMutation {
	return tc.mutation
}

// Save creates the Test in the database.
func (tc *TestCreate) Save(ctx context.Context) (*Test, error) {
	var (
		err  error
		node *Test
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Test)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TestCreate) SaveX(ctx context.Context) *Test {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TestCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TestCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TestCreate) defaults() {
	if _, ok := tc.mutation.UID(); !ok {
		v := test.DefaultUID()
		tc.mutation.SetUID(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := test.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := test.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.EnableTakeaway(); !ok {
		v := test.DefaultEnableTakeaway
		tc.mutation.SetEnableTakeaway(v)
	}
	if _, ok := tc.mutation.EnableAutoAccept(); !ok {
		v := test.DefaultEnableAutoAccept
		tc.mutation.SetEnableAutoAccept(v)
	}
	if _, ok := tc.mutation.Mode(); !ok {
		v := test.DefaultMode
		tc.mutation.SetMode(v)
	}
	if _, ok := tc.mutation.Sort(); !ok {
		v := test.DefaultSort
		tc.mutation.SetSort(v)
	}
	if _, ok := tc.mutation.PayMode(); !ok {
		v := test.DefaultPayMode
		tc.mutation.SetPayMode(v)
	}
	if _, ok := tc.mutation.PrintConfig(); !ok {
		v := test.DefaultPrintConfig
		tc.mutation.SetPrintConfig(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TestCreate) check() error {
	if _, ok := tc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Test.uid"`)}
	}
	if v, ok := tc.mutation.UID(); ok {
		if err := test.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Test.uid": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Test.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Test.updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entschema: missing required field "Test.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := test.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entschema: validator failed for field "Test.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.EnableTakeaway(); !ok {
		return &ValidationError{Name: "enable_takeaway", err: errors.New(`entschema: missing required field "Test.enable_takeaway"`)}
	}
	if _, ok := tc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`entschema: missing required field "Test.phone"`)}
	}
	if v, ok := tc.mutation.Phone(); ok {
		if err := test.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`entschema: validator failed for field "Test.phone": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Announcement(); !ok {
		return &ValidationError{Name: "announcement", err: errors.New(`entschema: missing required field "Test.announcement"`)}
	}
	if v, ok := tc.mutation.Announcement(); ok {
		if err := test.AnnouncementValidator(v); err != nil {
			return &ValidationError{Name: "announcement", err: fmt.Errorf(`entschema: validator failed for field "Test.announcement": %w`, err)}
		}
	}
	if _, ok := tc.mutation.EnableAutoAccept(); !ok {
		return &ValidationError{Name: "enable_auto_accept", err: errors.New(`entschema: missing required field "Test.enable_auto_accept"`)}
	}
	if _, ok := tc.mutation.DeliveryConfigs(); !ok {
		return &ValidationError{Name: "delivery_configs", err: errors.New(`entschema: missing required field "Test.delivery_configs"`)}
	}
	if _, ok := tc.mutation.PayConfigs(); !ok {
		return &ValidationError{Name: "pay_configs", err: errors.New(`entschema: missing required field "Test.pay_configs"`)}
	}
	if _, ok := tc.mutation.RingConfigs(); !ok {
		return &ValidationError{Name: "ring_configs", err: errors.New(`entschema: missing required field "Test.ring_configs"`)}
	}
	if _, ok := tc.mutation.BusinessGroupID(); !ok {
		return &ValidationError{Name: "business_group_id", err: errors.New(`entschema: missing required field "Test.business_group_id"`)}
	}
	if _, ok := tc.mutation.BusinessGroupUID(); !ok {
		return &ValidationError{Name: "business_group_uid", err: errors.New(`entschema: missing required field "Test.business_group_uid"`)}
	}
	if _, ok := tc.mutation.DishCategories(); !ok {
		return &ValidationError{Name: "dish_categories", err: errors.New(`entschema: missing required field "Test.dish_categories"`)}
	}
	if _, ok := tc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`entschema: missing required field "Test.mode"`)}
	}
	if _, ok := tc.mutation.SelfPickupConfigs(); !ok {
		return &ValidationError{Name: "self_pickup_configs", err: errors.New(`entschema: missing required field "Test.self_pickup_configs"`)}
	}
	if _, ok := tc.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server_id", err: errors.New(`entschema: missing required field "Test.server_id"`)}
	}
	if _, ok := tc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`entschema: missing required field "Test.image"`)}
	}
	if v, ok := tc.mutation.Image(); ok {
		if err := test.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`entschema: validator failed for field "Test.image": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`entschema: missing required field "Test.address"`)}
	}
	if v, ok := tc.mutation.Address(); ok {
		if err := test.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`entschema: validator failed for field "Test.address": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`entschema: missing required field "Test.latitude"`)}
	}
	if v, ok := tc.mutation.Latitude(); ok {
		if err := test.LatitudeValidator(v); err != nil {
			return &ValidationError{Name: "latitude", err: fmt.Errorf(`entschema: validator failed for field "Test.latitude": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`entschema: missing required field "Test.longitude"`)}
	}
	if v, ok := tc.mutation.Longitude(); ok {
		if err := test.LongitudeValidator(v); err != nil {
			return &ValidationError{Name: "longitude", err: fmt.Errorf(`entschema: validator failed for field "Test.longitude": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Banners(); !ok {
		return &ValidationError{Name: "banners", err: errors.New(`entschema: missing required field "Test.banners"`)}
	}
	if _, ok := tc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`entschema: missing required field "Test.sort"`)}
	}
	if _, ok := tc.mutation.PayMode(); !ok {
		return &ValidationError{Name: "pay_mode", err: errors.New(`entschema: missing required field "Test.pay_mode"`)}
	}
	return nil
}

func (tc *TestCreate) sqlSave(ctx context.Context) (*Test, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (tc *TestCreate) createSpec() (*Test, *sqlgraph.CreateSpec) {
	var (
		_node = &Test{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: test.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: test.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.UID(); ok {
		_spec.SetField(test.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(test.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(test.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeactivatedAt(); ok {
		_spec.SetField(test.FieldDeactivatedAt, field.TypeTime, value)
		_node.DeactivatedAt = &value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(test.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.EnableTakeaway(); ok {
		_spec.SetField(test.FieldEnableTakeaway, field.TypeBool, value)
		_node.EnableTakeaway = value
	}
	if value, ok := tc.mutation.Phone(); ok {
		_spec.SetField(test.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := tc.mutation.Announcement(); ok {
		_spec.SetField(test.FieldAnnouncement, field.TypeString, value)
		_node.Announcement = value
	}
	if value, ok := tc.mutation.EnableAutoAccept(); ok {
		_spec.SetField(test.FieldEnableAutoAccept, field.TypeBool, value)
		_node.EnableAutoAccept = value
	}
	if value, ok := tc.mutation.DeliveryConfigs(); ok {
		_spec.SetField(test.FieldDeliveryConfigs, field.TypeJSON, value)
		_node.DeliveryConfigs = value
	}
	if value, ok := tc.mutation.PayConfigs(); ok {
		_spec.SetField(test.FieldPayConfigs, field.TypeJSON, value)
		_node.PayConfigs = value
	}
	if value, ok := tc.mutation.PrintTimes(); ok {
		_spec.SetField(test.FieldPrintTimes, field.TypeInt, value)
		_node.PrintTimes = &value
	}
	if value, ok := tc.mutation.RingConfigs(); ok {
		_spec.SetField(test.FieldRingConfigs, field.TypeJSON, value)
		_node.RingConfigs = value
	}
	if value, ok := tc.mutation.BusinessGroupID(); ok {
		_spec.SetField(test.FieldBusinessGroupID, field.TypeInt, value)
		_node.BusinessGroupID = value
	}
	if value, ok := tc.mutation.BusinessGroupUID(); ok {
		_spec.SetField(test.FieldBusinessGroupUID, field.TypeString, value)
		_node.BusinessGroupUID = value
	}
	if value, ok := tc.mutation.DishCategories(); ok {
		_spec.SetField(test.FieldDishCategories, field.TypeJSON, value)
		_node.DishCategories = value
	}
	if value, ok := tc.mutation.EndOfTakeaway(); ok {
		_spec.SetField(test.FieldEndOfTakeaway, field.TypeTime, value)
		_node.EndOfTakeaway = value
	}
	if value, ok := tc.mutation.Mode(); ok {
		_spec.SetField(test.FieldMode, field.TypeInt, value)
		_node.Mode = value
	}
	if value, ok := tc.mutation.SelfPickupConfigs(); ok {
		_spec.SetField(test.FieldSelfPickupConfigs, field.TypeJSON, value)
		_node.SelfPickupConfigs = value
	}
	if value, ok := tc.mutation.ServerID(); ok {
		_spec.SetField(test.FieldServerID, field.TypeInt, value)
		_node.ServerID = value
	}
	if value, ok := tc.mutation.Image(); ok {
		_spec.SetField(test.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := tc.mutation.Address(); ok {
		_spec.SetField(test.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := tc.mutation.Latitude(); ok {
		_spec.SetField(test.FieldLatitude, field.TypeString, value)
		_node.Latitude = value
	}
	if value, ok := tc.mutation.Longitude(); ok {
		_spec.SetField(test.FieldLongitude, field.TypeString, value)
		_node.Longitude = value
	}
	if value, ok := tc.mutation.Banners(); ok {
		_spec.SetField(test.FieldBanners, field.TypeJSON, value)
		_node.Banners = value
	}
	if value, ok := tc.mutation.Sort(); ok {
		_spec.SetField(test.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := tc.mutation.PayMode(); ok {
		_spec.SetField(test.FieldPayMode, field.TypeString, value)
		_node.PayMode = value
	}
	if value, ok := tc.mutation.DineInConfigs(); ok {
		_spec.SetField(test.FieldDineInConfigs, field.TypeJSON, value)
		_node.DineInConfigs = value
	}
	if value, ok := tc.mutation.DealsConfig(); ok {
		_spec.SetField(test.FieldDealsConfig, field.TypeJSON, value)
		_node.DealsConfig = value
	}
	if value, ok := tc.mutation.PrintConfig(); ok {
		_spec.SetField(test.FieldPrintConfig, field.TypeJSON, value)
		_node.PrintConfig = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Test.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (tc *TestCreate) OnConflict(opts ...sql.ConflictOption) *TestUpsertOne {
	tc.conflict = opts
	return &TestUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Test.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TestCreate) OnConflictColumns(columns ...string) *TestUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TestUpsertOne{
		create: tc,
	}
}

type (
	// TestUpsertOne is the builder for "upsert"-ing
	//  one Test node.
	TestUpsertOne struct {
		create *TestCreate
	}

	// TestUpsert is the "OnConflict" setter.
	TestUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TestUpsert) SetUpdatedAt(v time.Time) *TestUpsert {
	u.Set(test.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestUpsert) UpdateUpdatedAt() *TestUpsert {
	u.SetExcluded(test.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TestUpsert) SetDeactivatedAt(v time.Time) *TestUpsert {
	u.Set(test.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TestUpsert) UpdateDeactivatedAt() *TestUpsert {
	u.SetExcluded(test.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TestUpsert) ClearDeactivatedAt() *TestUpsert {
	u.SetNull(test.FieldDeactivatedAt)
	return u
}

// SetName sets the "name" field.
func (u *TestUpsert) SetName(v string) *TestUpsert {
	u.Set(test.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestUpsert) UpdateName() *TestUpsert {
	u.SetExcluded(test.FieldName)
	return u
}

// SetEnableTakeaway sets the "enable_takeaway" field.
func (u *TestUpsert) SetEnableTakeaway(v bool) *TestUpsert {
	u.Set(test.FieldEnableTakeaway, v)
	return u
}

// UpdateEnableTakeaway sets the "enable_takeaway" field to the value that was provided on create.
func (u *TestUpsert) UpdateEnableTakeaway() *TestUpsert {
	u.SetExcluded(test.FieldEnableTakeaway)
	return u
}

// SetPhone sets the "phone" field.
func (u *TestUpsert) SetPhone(v string) *TestUpsert {
	u.Set(test.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *TestUpsert) UpdatePhone() *TestUpsert {
	u.SetExcluded(test.FieldPhone)
	return u
}

// SetAnnouncement sets the "announcement" field.
func (u *TestUpsert) SetAnnouncement(v string) *TestUpsert {
	u.Set(test.FieldAnnouncement, v)
	return u
}

// UpdateAnnouncement sets the "announcement" field to the value that was provided on create.
func (u *TestUpsert) UpdateAnnouncement() *TestUpsert {
	u.SetExcluded(test.FieldAnnouncement)
	return u
}

// SetEnableAutoAccept sets the "enable_auto_accept" field.
func (u *TestUpsert) SetEnableAutoAccept(v bool) *TestUpsert {
	u.Set(test.FieldEnableAutoAccept, v)
	return u
}

// UpdateEnableAutoAccept sets the "enable_auto_accept" field to the value that was provided on create.
func (u *TestUpsert) UpdateEnableAutoAccept() *TestUpsert {
	u.SetExcluded(test.FieldEnableAutoAccept)
	return u
}

// SetDeliveryConfigs sets the "delivery_configs" field.
func (u *TestUpsert) SetDeliveryConfigs(v schema.DeliveryConfig) *TestUpsert {
	u.Set(test.FieldDeliveryConfigs, v)
	return u
}

// UpdateDeliveryConfigs sets the "delivery_configs" field to the value that was provided on create.
func (u *TestUpsert) UpdateDeliveryConfigs() *TestUpsert {
	u.SetExcluded(test.FieldDeliveryConfigs)
	return u
}

// SetPayConfigs sets the "pay_configs" field.
func (u *TestUpsert) SetPayConfigs(v schema.PayConfig) *TestUpsert {
	u.Set(test.FieldPayConfigs, v)
	return u
}

// UpdatePayConfigs sets the "pay_configs" field to the value that was provided on create.
func (u *TestUpsert) UpdatePayConfigs() *TestUpsert {
	u.SetExcluded(test.FieldPayConfigs)
	return u
}

// SetPrintTimes sets the "print_times" field.
func (u *TestUpsert) SetPrintTimes(v int) *TestUpsert {
	u.Set(test.FieldPrintTimes, v)
	return u
}

// UpdatePrintTimes sets the "print_times" field to the value that was provided on create.
func (u *TestUpsert) UpdatePrintTimes() *TestUpsert {
	u.SetExcluded(test.FieldPrintTimes)
	return u
}

// AddPrintTimes adds v to the "print_times" field.
func (u *TestUpsert) AddPrintTimes(v int) *TestUpsert {
	u.Add(test.FieldPrintTimes, v)
	return u
}

// ClearPrintTimes clears the value of the "print_times" field.
func (u *TestUpsert) ClearPrintTimes() *TestUpsert {
	u.SetNull(test.FieldPrintTimes)
	return u
}

// SetRingConfigs sets the "ring_configs" field.
func (u *TestUpsert) SetRingConfigs(v schema.RingConfig) *TestUpsert {
	u.Set(test.FieldRingConfigs, v)
	return u
}

// UpdateRingConfigs sets the "ring_configs" field to the value that was provided on create.
func (u *TestUpsert) UpdateRingConfigs() *TestUpsert {
	u.SetExcluded(test.FieldRingConfigs)
	return u
}

// SetBusinessGroupID sets the "business_group_id" field.
func (u *TestUpsert) SetBusinessGroupID(v int) *TestUpsert {
	u.Set(test.FieldBusinessGroupID, v)
	return u
}

// UpdateBusinessGroupID sets the "business_group_id" field to the value that was provided on create.
func (u *TestUpsert) UpdateBusinessGroupID() *TestUpsert {
	u.SetExcluded(test.FieldBusinessGroupID)
	return u
}

// AddBusinessGroupID adds v to the "business_group_id" field.
func (u *TestUpsert) AddBusinessGroupID(v int) *TestUpsert {
	u.Add(test.FieldBusinessGroupID, v)
	return u
}

// SetBusinessGroupUID sets the "business_group_uid" field.
func (u *TestUpsert) SetBusinessGroupUID(v string) *TestUpsert {
	u.Set(test.FieldBusinessGroupUID, v)
	return u
}

// UpdateBusinessGroupUID sets the "business_group_uid" field to the value that was provided on create.
func (u *TestUpsert) UpdateBusinessGroupUID() *TestUpsert {
	u.SetExcluded(test.FieldBusinessGroupUID)
	return u
}

// SetDishCategories sets the "dish_categories" field.
func (u *TestUpsert) SetDishCategories(v []string) *TestUpsert {
	u.Set(test.FieldDishCategories, v)
	return u
}

// UpdateDishCategories sets the "dish_categories" field to the value that was provided on create.
func (u *TestUpsert) UpdateDishCategories() *TestUpsert {
	u.SetExcluded(test.FieldDishCategories)
	return u
}

// SetEndOfTakeaway sets the "end_of_takeaway" field.
func (u *TestUpsert) SetEndOfTakeaway(v time.Time) *TestUpsert {
	u.Set(test.FieldEndOfTakeaway, v)
	return u
}

// UpdateEndOfTakeaway sets the "end_of_takeaway" field to the value that was provided on create.
func (u *TestUpsert) UpdateEndOfTakeaway() *TestUpsert {
	u.SetExcluded(test.FieldEndOfTakeaway)
	return u
}

// ClearEndOfTakeaway clears the value of the "end_of_takeaway" field.
func (u *TestUpsert) ClearEndOfTakeaway() *TestUpsert {
	u.SetNull(test.FieldEndOfTakeaway)
	return u
}

// SetMode sets the "mode" field.
func (u *TestUpsert) SetMode(v int) *TestUpsert {
	u.Set(test.FieldMode, v)
	return u
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TestUpsert) UpdateMode() *TestUpsert {
	u.SetExcluded(test.FieldMode)
	return u
}

// AddMode adds v to the "mode" field.
func (u *TestUpsert) AddMode(v int) *TestUpsert {
	u.Add(test.FieldMode, v)
	return u
}

// SetSelfPickupConfigs sets the "self_pickup_configs" field.
func (u *TestUpsert) SetSelfPickupConfigs(v schema.SelfPickupConfig) *TestUpsert {
	u.Set(test.FieldSelfPickupConfigs, v)
	return u
}

// UpdateSelfPickupConfigs sets the "self_pickup_configs" field to the value that was provided on create.
func (u *TestUpsert) UpdateSelfPickupConfigs() *TestUpsert {
	u.SetExcluded(test.FieldSelfPickupConfigs)
	return u
}

// SetServerID sets the "server_id" field.
func (u *TestUpsert) SetServerID(v int) *TestUpsert {
	u.Set(test.FieldServerID, v)
	return u
}

// UpdateServerID sets the "server_id" field to the value that was provided on create.
func (u *TestUpsert) UpdateServerID() *TestUpsert {
	u.SetExcluded(test.FieldServerID)
	return u
}

// AddServerID adds v to the "server_id" field.
func (u *TestUpsert) AddServerID(v int) *TestUpsert {
	u.Add(test.FieldServerID, v)
	return u
}

// SetImage sets the "image" field.
func (u *TestUpsert) SetImage(v string) *TestUpsert {
	u.Set(test.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TestUpsert) UpdateImage() *TestUpsert {
	u.SetExcluded(test.FieldImage)
	return u
}

// SetAddress sets the "address" field.
func (u *TestUpsert) SetAddress(v string) *TestUpsert {
	u.Set(test.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TestUpsert) UpdateAddress() *TestUpsert {
	u.SetExcluded(test.FieldAddress)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *TestUpsert) SetLatitude(v string) *TestUpsert {
	u.Set(test.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *TestUpsert) UpdateLatitude() *TestUpsert {
	u.SetExcluded(test.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *TestUpsert) SetLongitude(v string) *TestUpsert {
	u.Set(test.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *TestUpsert) UpdateLongitude() *TestUpsert {
	u.SetExcluded(test.FieldLongitude)
	return u
}

// SetBanners sets the "banners" field.
func (u *TestUpsert) SetBanners(v schema.Banners) *TestUpsert {
	u.Set(test.FieldBanners, v)
	return u
}

// UpdateBanners sets the "banners" field to the value that was provided on create.
func (u *TestUpsert) UpdateBanners() *TestUpsert {
	u.SetExcluded(test.FieldBanners)
	return u
}

// SetSort sets the "sort" field.
func (u *TestUpsert) SetSort(v int) *TestUpsert {
	u.Set(test.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TestUpsert) UpdateSort() *TestUpsert {
	u.SetExcluded(test.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *TestUpsert) AddSort(v int) *TestUpsert {
	u.Add(test.FieldSort, v)
	return u
}

// SetPayMode sets the "pay_mode" field.
func (u *TestUpsert) SetPayMode(v string) *TestUpsert {
	u.Set(test.FieldPayMode, v)
	return u
}

// UpdatePayMode sets the "pay_mode" field to the value that was provided on create.
func (u *TestUpsert) UpdatePayMode() *TestUpsert {
	u.SetExcluded(test.FieldPayMode)
	return u
}

// SetDineInConfigs sets the "dine_in_configs" field.
func (u *TestUpsert) SetDineInConfigs(v schema.DineInConfigs) *TestUpsert {
	u.Set(test.FieldDineInConfigs, v)
	return u
}

// UpdateDineInConfigs sets the "dine_in_configs" field to the value that was provided on create.
func (u *TestUpsert) UpdateDineInConfigs() *TestUpsert {
	u.SetExcluded(test.FieldDineInConfigs)
	return u
}

// ClearDineInConfigs clears the value of the "dine_in_configs" field.
func (u *TestUpsert) ClearDineInConfigs() *TestUpsert {
	u.SetNull(test.FieldDineInConfigs)
	return u
}

// SetDealsConfig sets the "deals_config" field.
func (u *TestUpsert) SetDealsConfig(v schema.DealsConfig) *TestUpsert {
	u.Set(test.FieldDealsConfig, v)
	return u
}

// UpdateDealsConfig sets the "deals_config" field to the value that was provided on create.
func (u *TestUpsert) UpdateDealsConfig() *TestUpsert {
	u.SetExcluded(test.FieldDealsConfig)
	return u
}

// ClearDealsConfig clears the value of the "deals_config" field.
func (u *TestUpsert) ClearDealsConfig() *TestUpsert {
	u.SetNull(test.FieldDealsConfig)
	return u
}

// SetPrintConfig sets the "print_config" field.
func (u *TestUpsert) SetPrintConfig(v schema.PrintConfig) *TestUpsert {
	u.Set(test.FieldPrintConfig, v)
	return u
}

// UpdatePrintConfig sets the "print_config" field to the value that was provided on create.
func (u *TestUpsert) UpdatePrintConfig() *TestUpsert {
	u.SetExcluded(test.FieldPrintConfig)
	return u
}

// ClearPrintConfig clears the value of the "print_config" field.
func (u *TestUpsert) ClearPrintConfig() *TestUpsert {
	u.SetNull(test.FieldPrintConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Test.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(test.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestUpsertOne) UpdateNewValues() *TestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(test.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(test.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(test.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Test.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestUpsertOne) Ignore() *TestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestUpsertOne) DoNothing() *TestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestCreate.OnConflict
// documentation for more info.
func (u *TestUpsertOne) Update(set func(*TestUpsert)) *TestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestUpsertOne) SetUpdatedAt(v time.Time) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateUpdatedAt() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TestUpsertOne) SetDeactivatedAt(v time.Time) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateDeactivatedAt() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TestUpsertOne) ClearDeactivatedAt() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *TestUpsertOne) SetName(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateName() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateName()
	})
}

// SetEnableTakeaway sets the "enable_takeaway" field.
func (u *TestUpsertOne) SetEnableTakeaway(v bool) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetEnableTakeaway(v)
	})
}

// UpdateEnableTakeaway sets the "enable_takeaway" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateEnableTakeaway() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEnableTakeaway()
	})
}

// SetPhone sets the "phone" field.
func (u *TestUpsertOne) SetPhone(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *TestUpsertOne) UpdatePhone() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePhone()
	})
}

// SetAnnouncement sets the "announcement" field.
func (u *TestUpsertOne) SetAnnouncement(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetAnnouncement(v)
	})
}

// UpdateAnnouncement sets the "announcement" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateAnnouncement() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateAnnouncement()
	})
}

// SetEnableAutoAccept sets the "enable_auto_accept" field.
func (u *TestUpsertOne) SetEnableAutoAccept(v bool) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetEnableAutoAccept(v)
	})
}

// UpdateEnableAutoAccept sets the "enable_auto_accept" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateEnableAutoAccept() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEnableAutoAccept()
	})
}

// SetDeliveryConfigs sets the "delivery_configs" field.
func (u *TestUpsertOne) SetDeliveryConfigs(v schema.DeliveryConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetDeliveryConfigs(v)
	})
}

// UpdateDeliveryConfigs sets the "delivery_configs" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateDeliveryConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDeliveryConfigs()
	})
}

// SetPayConfigs sets the "pay_configs" field.
func (u *TestUpsertOne) SetPayConfigs(v schema.PayConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetPayConfigs(v)
	})
}

// UpdatePayConfigs sets the "pay_configs" field to the value that was provided on create.
func (u *TestUpsertOne) UpdatePayConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePayConfigs()
	})
}

// SetPrintTimes sets the "print_times" field.
func (u *TestUpsertOne) SetPrintTimes(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetPrintTimes(v)
	})
}

// AddPrintTimes adds v to the "print_times" field.
func (u *TestUpsertOne) AddPrintTimes(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.AddPrintTimes(v)
	})
}

// UpdatePrintTimes sets the "print_times" field to the value that was provided on create.
func (u *TestUpsertOne) UpdatePrintTimes() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePrintTimes()
	})
}

// ClearPrintTimes clears the value of the "print_times" field.
func (u *TestUpsertOne) ClearPrintTimes() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearPrintTimes()
	})
}

// SetRingConfigs sets the "ring_configs" field.
func (u *TestUpsertOne) SetRingConfigs(v schema.RingConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetRingConfigs(v)
	})
}

// UpdateRingConfigs sets the "ring_configs" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateRingConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateRingConfigs()
	})
}

// SetBusinessGroupID sets the "business_group_id" field.
func (u *TestUpsertOne) SetBusinessGroupID(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetBusinessGroupID(v)
	})
}

// AddBusinessGroupID adds v to the "business_group_id" field.
func (u *TestUpsertOne) AddBusinessGroupID(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.AddBusinessGroupID(v)
	})
}

// UpdateBusinessGroupID sets the "business_group_id" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateBusinessGroupID() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBusinessGroupID()
	})
}

// SetBusinessGroupUID sets the "business_group_uid" field.
func (u *TestUpsertOne) SetBusinessGroupUID(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetBusinessGroupUID(v)
	})
}

// UpdateBusinessGroupUID sets the "business_group_uid" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateBusinessGroupUID() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBusinessGroupUID()
	})
}

// SetDishCategories sets the "dish_categories" field.
func (u *TestUpsertOne) SetDishCategories(v []string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetDishCategories(v)
	})
}

// UpdateDishCategories sets the "dish_categories" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateDishCategories() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDishCategories()
	})
}

// SetEndOfTakeaway sets the "end_of_takeaway" field.
func (u *TestUpsertOne) SetEndOfTakeaway(v time.Time) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetEndOfTakeaway(v)
	})
}

// UpdateEndOfTakeaway sets the "end_of_takeaway" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateEndOfTakeaway() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEndOfTakeaway()
	})
}

// ClearEndOfTakeaway clears the value of the "end_of_takeaway" field.
func (u *TestUpsertOne) ClearEndOfTakeaway() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearEndOfTakeaway()
	})
}

// SetMode sets the "mode" field.
func (u *TestUpsertOne) SetMode(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetMode(v)
	})
}

// AddMode adds v to the "mode" field.
func (u *TestUpsertOne) AddMode(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.AddMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateMode() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateMode()
	})
}

// SetSelfPickupConfigs sets the "self_pickup_configs" field.
func (u *TestUpsertOne) SetSelfPickupConfigs(v schema.SelfPickupConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetSelfPickupConfigs(v)
	})
}

// UpdateSelfPickupConfigs sets the "self_pickup_configs" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateSelfPickupConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateSelfPickupConfigs()
	})
}

// SetServerID sets the "server_id" field.
func (u *TestUpsertOne) SetServerID(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetServerID(v)
	})
}

// AddServerID adds v to the "server_id" field.
func (u *TestUpsertOne) AddServerID(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.AddServerID(v)
	})
}

// UpdateServerID sets the "server_id" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateServerID() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateServerID()
	})
}

// SetImage sets the "image" field.
func (u *TestUpsertOne) SetImage(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateImage() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateImage()
	})
}

// SetAddress sets the "address" field.
func (u *TestUpsertOne) SetAddress(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateAddress() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *TestUpsertOne) SetLatitude(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateLatitude() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *TestUpsertOne) SetLongitude(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateLongitude() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateLongitude()
	})
}

// SetBanners sets the "banners" field.
func (u *TestUpsertOne) SetBanners(v schema.Banners) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetBanners(v)
	})
}

// UpdateBanners sets the "banners" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateBanners() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBanners()
	})
}

// SetSort sets the "sort" field.
func (u *TestUpsertOne) SetSort(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *TestUpsertOne) AddSort(v int) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateSort() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateSort()
	})
}

// SetPayMode sets the "pay_mode" field.
func (u *TestUpsertOne) SetPayMode(v string) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetPayMode(v)
	})
}

// UpdatePayMode sets the "pay_mode" field to the value that was provided on create.
func (u *TestUpsertOne) UpdatePayMode() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePayMode()
	})
}

// SetDineInConfigs sets the "dine_in_configs" field.
func (u *TestUpsertOne) SetDineInConfigs(v schema.DineInConfigs) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetDineInConfigs(v)
	})
}

// UpdateDineInConfigs sets the "dine_in_configs" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateDineInConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDineInConfigs()
	})
}

// ClearDineInConfigs clears the value of the "dine_in_configs" field.
func (u *TestUpsertOne) ClearDineInConfigs() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearDineInConfigs()
	})
}

// SetDealsConfig sets the "deals_config" field.
func (u *TestUpsertOne) SetDealsConfig(v schema.DealsConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetDealsConfig(v)
	})
}

// UpdateDealsConfig sets the "deals_config" field to the value that was provided on create.
func (u *TestUpsertOne) UpdateDealsConfig() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDealsConfig()
	})
}

// ClearDealsConfig clears the value of the "deals_config" field.
func (u *TestUpsertOne) ClearDealsConfig() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearDealsConfig()
	})
}

// SetPrintConfig sets the "print_config" field.
func (u *TestUpsertOne) SetPrintConfig(v schema.PrintConfig) *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.SetPrintConfig(v)
	})
}

// UpdatePrintConfig sets the "print_config" field to the value that was provided on create.
func (u *TestUpsertOne) UpdatePrintConfig() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePrintConfig()
	})
}

// ClearPrintConfig clears the value of the "print_config" field.
func (u *TestUpsertOne) ClearPrintConfig() *TestUpsertOne {
	return u.Update(func(s *TestUpsert) {
		s.ClearPrintConfig()
	})
}

// Exec executes the query.
func (u *TestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestCreateBulk is the builder for creating many Test entities in bulk.
type TestCreateBulk struct {
	config
	builders []*TestCreate
	conflict []sql.ConflictOption
}

// Save creates the Test entities in the database.
func (tcb *TestCreateBulk) Save(ctx context.Context) ([]*Test, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Test, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TestCreateBulk) SaveX(ctx context.Context) []*Test {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TestCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TestCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Test.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TestCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestUpsertBulk {
	tcb.conflict = opts
	return &TestUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Test.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TestCreateBulk) OnConflictColumns(columns ...string) *TestUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TestUpsertBulk{
		create: tcb,
	}
}

// TestUpsertBulk is the builder for "upsert"-ing
// a bulk of Test nodes.
type TestUpsertBulk struct {
	create *TestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Test.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(test.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestUpsertBulk) UpdateNewValues() *TestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(test.FieldID)
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(test.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(test.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Test.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestUpsertBulk) Ignore() *TestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestUpsertBulk) DoNothing() *TestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestCreateBulk.OnConflict
// documentation for more info.
func (u *TestUpsertBulk) Update(set func(*TestUpsert)) *TestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestUpsertBulk) SetUpdatedAt(v time.Time) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateUpdatedAt() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TestUpsertBulk) SetDeactivatedAt(v time.Time) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateDeactivatedAt() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TestUpsertBulk) ClearDeactivatedAt() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *TestUpsertBulk) SetName(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateName() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateName()
	})
}

// SetEnableTakeaway sets the "enable_takeaway" field.
func (u *TestUpsertBulk) SetEnableTakeaway(v bool) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetEnableTakeaway(v)
	})
}

// UpdateEnableTakeaway sets the "enable_takeaway" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateEnableTakeaway() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEnableTakeaway()
	})
}

// SetPhone sets the "phone" field.
func (u *TestUpsertBulk) SetPhone(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdatePhone() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePhone()
	})
}

// SetAnnouncement sets the "announcement" field.
func (u *TestUpsertBulk) SetAnnouncement(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetAnnouncement(v)
	})
}

// UpdateAnnouncement sets the "announcement" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateAnnouncement() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateAnnouncement()
	})
}

// SetEnableAutoAccept sets the "enable_auto_accept" field.
func (u *TestUpsertBulk) SetEnableAutoAccept(v bool) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetEnableAutoAccept(v)
	})
}

// UpdateEnableAutoAccept sets the "enable_auto_accept" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateEnableAutoAccept() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEnableAutoAccept()
	})
}

// SetDeliveryConfigs sets the "delivery_configs" field.
func (u *TestUpsertBulk) SetDeliveryConfigs(v schema.DeliveryConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetDeliveryConfigs(v)
	})
}

// UpdateDeliveryConfigs sets the "delivery_configs" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateDeliveryConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDeliveryConfigs()
	})
}

// SetPayConfigs sets the "pay_configs" field.
func (u *TestUpsertBulk) SetPayConfigs(v schema.PayConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetPayConfigs(v)
	})
}

// UpdatePayConfigs sets the "pay_configs" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdatePayConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePayConfigs()
	})
}

// SetPrintTimes sets the "print_times" field.
func (u *TestUpsertBulk) SetPrintTimes(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetPrintTimes(v)
	})
}

// AddPrintTimes adds v to the "print_times" field.
func (u *TestUpsertBulk) AddPrintTimes(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.AddPrintTimes(v)
	})
}

// UpdatePrintTimes sets the "print_times" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdatePrintTimes() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePrintTimes()
	})
}

// ClearPrintTimes clears the value of the "print_times" field.
func (u *TestUpsertBulk) ClearPrintTimes() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearPrintTimes()
	})
}

// SetRingConfigs sets the "ring_configs" field.
func (u *TestUpsertBulk) SetRingConfigs(v schema.RingConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetRingConfigs(v)
	})
}

// UpdateRingConfigs sets the "ring_configs" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateRingConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateRingConfigs()
	})
}

// SetBusinessGroupID sets the "business_group_id" field.
func (u *TestUpsertBulk) SetBusinessGroupID(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetBusinessGroupID(v)
	})
}

// AddBusinessGroupID adds v to the "business_group_id" field.
func (u *TestUpsertBulk) AddBusinessGroupID(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.AddBusinessGroupID(v)
	})
}

// UpdateBusinessGroupID sets the "business_group_id" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateBusinessGroupID() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBusinessGroupID()
	})
}

// SetBusinessGroupUID sets the "business_group_uid" field.
func (u *TestUpsertBulk) SetBusinessGroupUID(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetBusinessGroupUID(v)
	})
}

// UpdateBusinessGroupUID sets the "business_group_uid" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateBusinessGroupUID() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBusinessGroupUID()
	})
}

// SetDishCategories sets the "dish_categories" field.
func (u *TestUpsertBulk) SetDishCategories(v []string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetDishCategories(v)
	})
}

// UpdateDishCategories sets the "dish_categories" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateDishCategories() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDishCategories()
	})
}

// SetEndOfTakeaway sets the "end_of_takeaway" field.
func (u *TestUpsertBulk) SetEndOfTakeaway(v time.Time) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetEndOfTakeaway(v)
	})
}

// UpdateEndOfTakeaway sets the "end_of_takeaway" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateEndOfTakeaway() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateEndOfTakeaway()
	})
}

// ClearEndOfTakeaway clears the value of the "end_of_takeaway" field.
func (u *TestUpsertBulk) ClearEndOfTakeaway() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearEndOfTakeaway()
	})
}

// SetMode sets the "mode" field.
func (u *TestUpsertBulk) SetMode(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetMode(v)
	})
}

// AddMode adds v to the "mode" field.
func (u *TestUpsertBulk) AddMode(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.AddMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateMode() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateMode()
	})
}

// SetSelfPickupConfigs sets the "self_pickup_configs" field.
func (u *TestUpsertBulk) SetSelfPickupConfigs(v schema.SelfPickupConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetSelfPickupConfigs(v)
	})
}

// UpdateSelfPickupConfigs sets the "self_pickup_configs" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateSelfPickupConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateSelfPickupConfigs()
	})
}

// SetServerID sets the "server_id" field.
func (u *TestUpsertBulk) SetServerID(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetServerID(v)
	})
}

// AddServerID adds v to the "server_id" field.
func (u *TestUpsertBulk) AddServerID(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.AddServerID(v)
	})
}

// UpdateServerID sets the "server_id" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateServerID() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateServerID()
	})
}

// SetImage sets the "image" field.
func (u *TestUpsertBulk) SetImage(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateImage() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateImage()
	})
}

// SetAddress sets the "address" field.
func (u *TestUpsertBulk) SetAddress(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateAddress() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *TestUpsertBulk) SetLatitude(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateLatitude() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *TestUpsertBulk) SetLongitude(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateLongitude() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateLongitude()
	})
}

// SetBanners sets the "banners" field.
func (u *TestUpsertBulk) SetBanners(v schema.Banners) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetBanners(v)
	})
}

// UpdateBanners sets the "banners" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateBanners() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateBanners()
	})
}

// SetSort sets the "sort" field.
func (u *TestUpsertBulk) SetSort(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *TestUpsertBulk) AddSort(v int) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateSort() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateSort()
	})
}

// SetPayMode sets the "pay_mode" field.
func (u *TestUpsertBulk) SetPayMode(v string) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetPayMode(v)
	})
}

// UpdatePayMode sets the "pay_mode" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdatePayMode() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePayMode()
	})
}

// SetDineInConfigs sets the "dine_in_configs" field.
func (u *TestUpsertBulk) SetDineInConfigs(v schema.DineInConfigs) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetDineInConfigs(v)
	})
}

// UpdateDineInConfigs sets the "dine_in_configs" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateDineInConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDineInConfigs()
	})
}

// ClearDineInConfigs clears the value of the "dine_in_configs" field.
func (u *TestUpsertBulk) ClearDineInConfigs() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearDineInConfigs()
	})
}

// SetDealsConfig sets the "deals_config" field.
func (u *TestUpsertBulk) SetDealsConfig(v schema.DealsConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetDealsConfig(v)
	})
}

// UpdateDealsConfig sets the "deals_config" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdateDealsConfig() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdateDealsConfig()
	})
}

// ClearDealsConfig clears the value of the "deals_config" field.
func (u *TestUpsertBulk) ClearDealsConfig() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearDealsConfig()
	})
}

// SetPrintConfig sets the "print_config" field.
func (u *TestUpsertBulk) SetPrintConfig(v schema.PrintConfig) *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.SetPrintConfig(v)
	})
}

// UpdatePrintConfig sets the "print_config" field to the value that was provided on create.
func (u *TestUpsertBulk) UpdatePrintConfig() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.UpdatePrintConfig()
	})
}

// ClearPrintConfig clears the value of the "print_config" field.
func (u *TestUpsertBulk) ClearPrintConfig() *TestUpsertBulk {
	return u.Update(func(s *TestUpsert) {
		s.ClearPrintConfig()
	})
}

// Exec executes the query.
func (u *TestUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the TestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
