// Code generated by ent, DO NOT EDIT.

package test

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zaihui/ent-factory/gen/entschema/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAt applies equality check predicate on the "deactivated_at" field. It's identical to DeactivatedAtEQ.
func DeactivatedAt(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EnableTakeaway applies equality check predicate on the "enable_takeaway" field. It's identical to EnableTakeawayEQ.
func EnableTakeaway(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableTakeaway), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Announcement applies equality check predicate on the "announcement" field. It's identical to AnnouncementEQ.
func Announcement(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnouncement), v))
	})
}

// EnableAutoAccept applies equality check predicate on the "enable_auto_accept" field. It's identical to EnableAutoAcceptEQ.
func EnableAutoAccept(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableAutoAccept), v))
	})
}

// PrintTimes applies equality check predicate on the "print_times" field. It's identical to PrintTimesEQ.
func PrintTimes(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintTimes), v))
	})
}

// BusinessGroupID applies equality check predicate on the "business_group_id" field. It's identical to BusinessGroupIDEQ.
func BusinessGroupID(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupUID applies equality check predicate on the "business_group_uid" field. It's identical to BusinessGroupUIDEQ.
func BusinessGroupUID(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessGroupUID), v))
	})
}

// EndOfTakeaway applies equality check predicate on the "end_of_takeaway" field. It's identical to EndOfTakeawayEQ.
func EndOfTakeaway(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndOfTakeaway), v))
	})
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ServerID applies equality check predicate on the "server_id" field. It's identical to ServerIDEQ.
func ServerID(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerID), v))
	})
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// PayMode applies equality check predicate on the "pay_mode" field. It's identical to PayModeEQ.
func PayMode(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayMode), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUID), v))
	})
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUID), v))
	})
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUID), v))
	})
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUID), v))
	})
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAtEQ applies the EQ predicate on the "deactivated_at" field.
func DeactivatedAtEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtNEQ applies the NEQ predicate on the "deactivated_at" field.
func DeactivatedAtNEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIn applies the In predicate on the "deactivated_at" field.
func DeactivatedAtIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtNotIn applies the NotIn predicate on the "deactivated_at" field.
func DeactivatedAtNotIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtGT applies the GT predicate on the "deactivated_at" field.
func DeactivatedAtGT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtGTE applies the GTE predicate on the "deactivated_at" field.
func DeactivatedAtGTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLT applies the LT predicate on the "deactivated_at" field.
func DeactivatedAtLT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLTE applies the LTE predicate on the "deactivated_at" field.
func DeactivatedAtLTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIsNil applies the IsNil predicate on the "deactivated_at" field.
func DeactivatedAtIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeactivatedAt)))
	})
}

// DeactivatedAtNotNil applies the NotNil predicate on the "deactivated_at" field.
func DeactivatedAtNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeactivatedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EnableTakeawayEQ applies the EQ predicate on the "enable_takeaway" field.
func EnableTakeawayEQ(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableTakeaway), v))
	})
}

// EnableTakeawayNEQ applies the NEQ predicate on the "enable_takeaway" field.
func EnableTakeawayNEQ(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableTakeaway), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// AnnouncementEQ applies the EQ predicate on the "announcement" field.
func AnnouncementEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementNEQ applies the NEQ predicate on the "announcement" field.
func AnnouncementNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementIn applies the In predicate on the "announcement" field.
func AnnouncementIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAnnouncement), v...))
	})
}

// AnnouncementNotIn applies the NotIn predicate on the "announcement" field.
func AnnouncementNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAnnouncement), v...))
	})
}

// AnnouncementGT applies the GT predicate on the "announcement" field.
func AnnouncementGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementGTE applies the GTE predicate on the "announcement" field.
func AnnouncementGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementLT applies the LT predicate on the "announcement" field.
func AnnouncementLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementLTE applies the LTE predicate on the "announcement" field.
func AnnouncementLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementContains applies the Contains predicate on the "announcement" field.
func AnnouncementContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementHasPrefix applies the HasPrefix predicate on the "announcement" field.
func AnnouncementHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementHasSuffix applies the HasSuffix predicate on the "announcement" field.
func AnnouncementHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementEqualFold applies the EqualFold predicate on the "announcement" field.
func AnnouncementEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnnouncement), v))
	})
}

// AnnouncementContainsFold applies the ContainsFold predicate on the "announcement" field.
func AnnouncementContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnnouncement), v))
	})
}

// EnableAutoAcceptEQ applies the EQ predicate on the "enable_auto_accept" field.
func EnableAutoAcceptEQ(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableAutoAccept), v))
	})
}

// EnableAutoAcceptNEQ applies the NEQ predicate on the "enable_auto_accept" field.
func EnableAutoAcceptNEQ(v bool) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableAutoAccept), v))
	})
}

// PrintTimesEQ applies the EQ predicate on the "print_times" field.
func PrintTimesEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesNEQ applies the NEQ predicate on the "print_times" field.
func PrintTimesNEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesIn applies the In predicate on the "print_times" field.
func PrintTimesIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrintTimes), v...))
	})
}

// PrintTimesNotIn applies the NotIn predicate on the "print_times" field.
func PrintTimesNotIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrintTimes), v...))
	})
}

// PrintTimesGT applies the GT predicate on the "print_times" field.
func PrintTimesGT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesGTE applies the GTE predicate on the "print_times" field.
func PrintTimesGTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesLT applies the LT predicate on the "print_times" field.
func PrintTimesLT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesLTE applies the LTE predicate on the "print_times" field.
func PrintTimesLTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesIsNil applies the IsNil predicate on the "print_times" field.
func PrintTimesIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrintTimes)))
	})
}

// PrintTimesNotNil applies the NotNil predicate on the "print_times" field.
func PrintTimesNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrintTimes)))
	})
}

// BusinessGroupIDEQ applies the EQ predicate on the "business_group_id" field.
func BusinessGroupIDEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupIDNEQ applies the NEQ predicate on the "business_group_id" field.
func BusinessGroupIDNEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupIDIn applies the In predicate on the "business_group_id" field.
func BusinessGroupIDIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBusinessGroupID), v...))
	})
}

// BusinessGroupIDNotIn applies the NotIn predicate on the "business_group_id" field.
func BusinessGroupIDNotIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBusinessGroupID), v...))
	})
}

// BusinessGroupIDGT applies the GT predicate on the "business_group_id" field.
func BusinessGroupIDGT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupIDGTE applies the GTE predicate on the "business_group_id" field.
func BusinessGroupIDGTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupIDLT applies the LT predicate on the "business_group_id" field.
func BusinessGroupIDLT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupIDLTE applies the LTE predicate on the "business_group_id" field.
func BusinessGroupIDLTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessGroupID), v))
	})
}

// BusinessGroupUIDEQ applies the EQ predicate on the "business_group_uid" field.
func BusinessGroupUIDEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDNEQ applies the NEQ predicate on the "business_group_uid" field.
func BusinessGroupUIDNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDIn applies the In predicate on the "business_group_uid" field.
func BusinessGroupUIDIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBusinessGroupUID), v...))
	})
}

// BusinessGroupUIDNotIn applies the NotIn predicate on the "business_group_uid" field.
func BusinessGroupUIDNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBusinessGroupUID), v...))
	})
}

// BusinessGroupUIDGT applies the GT predicate on the "business_group_uid" field.
func BusinessGroupUIDGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDGTE applies the GTE predicate on the "business_group_uid" field.
func BusinessGroupUIDGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDLT applies the LT predicate on the "business_group_uid" field.
func BusinessGroupUIDLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDLTE applies the LTE predicate on the "business_group_uid" field.
func BusinessGroupUIDLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDContains applies the Contains predicate on the "business_group_uid" field.
func BusinessGroupUIDContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDHasPrefix applies the HasPrefix predicate on the "business_group_uid" field.
func BusinessGroupUIDHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDHasSuffix applies the HasSuffix predicate on the "business_group_uid" field.
func BusinessGroupUIDHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDEqualFold applies the EqualFold predicate on the "business_group_uid" field.
func BusinessGroupUIDEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessGroupUID), v))
	})
}

// BusinessGroupUIDContainsFold applies the ContainsFold predicate on the "business_group_uid" field.
func BusinessGroupUIDContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessGroupUID), v))
	})
}

// EndOfTakeawayEQ applies the EQ predicate on the "end_of_takeaway" field.
func EndOfTakeawayEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayNEQ applies the NEQ predicate on the "end_of_takeaway" field.
func EndOfTakeawayNEQ(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayIn applies the In predicate on the "end_of_takeaway" field.
func EndOfTakeawayIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndOfTakeaway), v...))
	})
}

// EndOfTakeawayNotIn applies the NotIn predicate on the "end_of_takeaway" field.
func EndOfTakeawayNotIn(vs ...time.Time) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndOfTakeaway), v...))
	})
}

// EndOfTakeawayGT applies the GT predicate on the "end_of_takeaway" field.
func EndOfTakeawayGT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayGTE applies the GTE predicate on the "end_of_takeaway" field.
func EndOfTakeawayGTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayLT applies the LT predicate on the "end_of_takeaway" field.
func EndOfTakeawayLT(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayLTE applies the LTE predicate on the "end_of_takeaway" field.
func EndOfTakeawayLTE(v time.Time) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndOfTakeaway), v))
	})
}

// EndOfTakeawayIsNil applies the IsNil predicate on the "end_of_takeaway" field.
func EndOfTakeawayIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndOfTakeaway)))
	})
}

// EndOfTakeawayNotNil applies the NotNil predicate on the "end_of_takeaway" field.
func EndOfTakeawayNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndOfTakeaway)))
	})
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMode), v))
	})
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMode), v...))
	})
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMode), v...))
	})
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMode), v))
	})
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMode), v))
	})
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMode), v))
	})
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMode), v))
	})
}

// ServerIDEQ applies the EQ predicate on the "server_id" field.
func ServerIDEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerID), v))
	})
}

// ServerIDNEQ applies the NEQ predicate on the "server_id" field.
func ServerIDNEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServerID), v))
	})
}

// ServerIDIn applies the In predicate on the "server_id" field.
func ServerIDIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServerID), v...))
	})
}

// ServerIDNotIn applies the NotIn predicate on the "server_id" field.
func ServerIDNotIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServerID), v...))
	})
}

// ServerIDGT applies the GT predicate on the "server_id" field.
func ServerIDGT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServerID), v))
	})
}

// ServerIDGTE applies the GTE predicate on the "server_id" field.
func ServerIDGTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServerID), v))
	})
}

// ServerIDLT applies the LT predicate on the "server_id" field.
func ServerIDLT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServerID), v))
	})
}

// ServerIDLTE applies the LTE predicate on the "server_id" field.
func ServerIDLTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServerID), v))
	})
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImage), v))
	})
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImage), v...))
	})
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImage), v...))
	})
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImage), v))
	})
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImage), v))
	})
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImage), v))
	})
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImage), v))
	})
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImage), v))
	})
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImage), v))
	})
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImage), v))
	})
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImage), v))
	})
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImage), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatitude), v))
	})
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLatitude), v...))
	})
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLatitude), v...))
	})
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatitude), v))
	})
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatitude), v))
	})
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatitude), v))
	})
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatitude), v))
	})
}

// LatitudeContains applies the Contains predicate on the "latitude" field.
func LatitudeContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLatitude), v))
	})
}

// LatitudeHasPrefix applies the HasPrefix predicate on the "latitude" field.
func LatitudeHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLatitude), v))
	})
}

// LatitudeHasSuffix applies the HasSuffix predicate on the "latitude" field.
func LatitudeHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLatitude), v))
	})
}

// LatitudeEqualFold applies the EqualFold predicate on the "latitude" field.
func LatitudeEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLatitude), v))
	})
}

// LatitudeContainsFold applies the ContainsFold predicate on the "latitude" field.
func LatitudeContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLatitude), v))
	})
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongitude), v))
	})
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLongitude), v...))
	})
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLongitude), v...))
	})
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongitude), v))
	})
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongitude), v))
	})
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongitude), v))
	})
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongitude), v))
	})
}

// LongitudeContains applies the Contains predicate on the "longitude" field.
func LongitudeContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongitude), v))
	})
}

// LongitudeHasPrefix applies the HasPrefix predicate on the "longitude" field.
func LongitudeHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongitude), v))
	})
}

// LongitudeHasSuffix applies the HasSuffix predicate on the "longitude" field.
func LongitudeHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongitude), v))
	})
}

// LongitudeEqualFold applies the EqualFold predicate on the "longitude" field.
func LongitudeEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongitude), v))
	})
}

// LongitudeContainsFold applies the ContainsFold predicate on the "longitude" field.
func LongitudeContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongitude), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// PayModeEQ applies the EQ predicate on the "pay_mode" field.
func PayModeEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayMode), v))
	})
}

// PayModeNEQ applies the NEQ predicate on the "pay_mode" field.
func PayModeNEQ(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayMode), v))
	})
}

// PayModeIn applies the In predicate on the "pay_mode" field.
func PayModeIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPayMode), v...))
	})
}

// PayModeNotIn applies the NotIn predicate on the "pay_mode" field.
func PayModeNotIn(vs ...string) predicate.Test {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPayMode), v...))
	})
}

// PayModeGT applies the GT predicate on the "pay_mode" field.
func PayModeGT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayMode), v))
	})
}

// PayModeGTE applies the GTE predicate on the "pay_mode" field.
func PayModeGTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayMode), v))
	})
}

// PayModeLT applies the LT predicate on the "pay_mode" field.
func PayModeLT(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayMode), v))
	})
}

// PayModeLTE applies the LTE predicate on the "pay_mode" field.
func PayModeLTE(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayMode), v))
	})
}

// PayModeContains applies the Contains predicate on the "pay_mode" field.
func PayModeContains(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayMode), v))
	})
}

// PayModeHasPrefix applies the HasPrefix predicate on the "pay_mode" field.
func PayModeHasPrefix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayMode), v))
	})
}

// PayModeHasSuffix applies the HasSuffix predicate on the "pay_mode" field.
func PayModeHasSuffix(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayMode), v))
	})
}

// PayModeEqualFold applies the EqualFold predicate on the "pay_mode" field.
func PayModeEqualFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayMode), v))
	})
}

// PayModeContainsFold applies the ContainsFold predicate on the "pay_mode" field.
func PayModeContainsFold(v string) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayMode), v))
	})
}

// DineInConfigsIsNil applies the IsNil predicate on the "dine_in_configs" field.
func DineInConfigsIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDineInConfigs)))
	})
}

// DineInConfigsNotNil applies the NotNil predicate on the "dine_in_configs" field.
func DineInConfigsNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDineInConfigs)))
	})
}

// DealsConfigIsNil applies the IsNil predicate on the "deals_config" field.
func DealsConfigIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDealsConfig)))
	})
}

// DealsConfigNotNil applies the NotNil predicate on the "deals_config" field.
func DealsConfigNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDealsConfig)))
	})
}

// PrintConfigIsNil applies the IsNil predicate on the "print_config" field.
func PrintConfigIsNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrintConfig)))
	})
}

// PrintConfigNotNil applies the NotNil predicate on the "print_config" field.
func PrintConfigNotNil() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrintConfig)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Test) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Test) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Test) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		p(s.Not())
	})
}
